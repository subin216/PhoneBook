{"version":3,"sources":["logo.svg","components/PhoneForm.js","components/PhoneInfo.js","components/PhoneInfoList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","PhoneForm","state","name","phone","handleChange","e","_this","setState","Object","defineProperty","target","value","handleSubmit","preventDefault","props","onCreate","react_default","a","createElement","onSubmit","this","placeholder","onChange","type","Component","PhoneInfo","editing","handleRemove","_this$props","info","onRemove","id","handleToggleEdit","_e$target","prevProps","prevState","_this$props2","onUpdate","style","border","padding","margin","onClick","_this$props$info","defaultProps","PhoneInfoList","data","list","map","components_PhoneInfo","key","console","warn","App","information","keyword","handleCreate","concat","objectSpread","filter","handleUpdate","_this$state","components_PhoneForm","components_PhoneInfoList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.994f9b89.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\n\nclass PhoneForm extends Component {\n    state = {\n        name: '', \n        phone: ''\n    }\n    handleChange = (e) => {\n        this.setState({\n            [e.target.name]:e.target.value\n        })\n    }\n    handleSubmit = (e) => {\n        //prevent page reloading\n        e.preventDefault();\n        // send state to parents\n        this.props.onCreate(this.state);\n        this.setState({\n            name: '',\n            phone: ''\n        })\n    }\n    render() {\n        return(\n           <form onSubmit = {this.handleSubmit}>\n               <input\n                    placeholder = \"name\"\n                    value = {this.state.name}\n                    onChange = {this.handleChange}\n                    name = \"name\"\n                />\n                <input\n                    placeholder = \"phone number\"\n                    value = {this.state.phone}\n                    onChange = {this.handleChange}\n                    name=\"phone\"\n                />\n                <button type=\"submit\"> submit</button>\n           </form> \n        );\n    }\n}\n\nexport default PhoneForm;","import React, { Component } from 'react';\n\nclass PhoneInfo extends Component {\n    static defaultProps = {\n        info: {\n            name: 'name',\n            phone: '010-0000-0000',\n            id: 0\n        },\n    }\n\n    state = {\n        editing: false,\n        name: '',\n        phone: '',\n    }\n\n    handleRemove = () => {\n        const { info, onRemove } = this.props;\n        onRemove(info.id);\n    }\n\n    handleToggleEdit = () => {\n        const { editing } = this.state;\n        this.setState({editing: !editing });\n    }\n\n    handleChange = (e) => {\n        const { name, value } = e.target;\n        this.setState({\n            [name]: value\n        });\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        const { info, onUpdate } = this.props;\n        if(!prevState.editing && this.state.editing) {\n            this.setState({\n                name: info.name,\n                phone: info.phone\n            })\n        }\n        if(prevState.editing && !this.state.editing) {\n            onUpdate(info.id, {\n                name: this.state.name,\n                phone: this.state.phone\n            });\n        }\n    }\n\n    render() {\n        const style = {\n            border: '1px solid black',\n            padding: '8px',\n            margin: '8px'\n        };\n        const { editing } = this.state;\n\n        if(editing) {\n            return (\n                <div style={style}>\n                    <div>\n                        <input\n                            value={this.state.name}\n                            name=\"name\"\n                            placeholder=\"name\"\n                            onChange={this.handleChange}\n                        />\n                    </div>\n                    <div>\n                        <input\n                            value={this.state.phone}\n                            name=\"phone\"\n                            placeholder=\"phone\"\n                            onChange={this.handleChange}\n                        />\n                    </div>\n                    <button onClick={this.handleToggleEdit}>Edit</button>\n                    <button onClick={this.handleRemove}>Delete</button>\n                </div>\n            );\n        }\n\n        const {\n            name, phone, id\n        } = this.props.info;\n        return (\n            <div style={style}>\n                <div><b>{name}</b></div>\n                <div>{phone}</div>\n                <button onClick={this.handleToggleEdit}>Edit</button>\n                <button onClick={this.handleRemove}>Delete</button>\n            </div>\n        );\n        \n        \n    }\n}\n\nexport default PhoneInfo;","import React, { Component } from 'react';\nimport PhoneInfo from './PhoneInfo';\n\nclass PhoneInfoList extends Component {\n    static defaultProps = {\n        data: [],\n        onRemove: () => console.warn('onRemove not defined'),\n        onUpdate: () => console.warn('onUpdate not defined'),\n    }\n\n    render() {\n        const { data, onRemove, onUpdate } = this.props;\n        const list = data.map(\n            info => (\n            <PhoneInfo \n                key={info.id}\n                info={info}\n                onRemove={onRemove}\n                onUpdate={onUpdate}\n            />)\n        );\n\n        return (\n            <div>\n                {list}\n            </div>\n        );\n    }\n}\n\nexport default PhoneInfoList;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport PhoneForm from './components/PhoneForm';\nimport PhoneInfoList from './components/PhoneInfoList';\n\nclass App extends Component {\n  id = 2\n  state = {\n    information: [\n      {\n        id: 0,\n        name: 'Paul',\n        phone: '010-1234-1234'\n      },\n      {\n        id: 1,\n        name: 'Wang',\n        phone: '010-1234-5678'\n      }\n    ],\n    keyword: ''\n  }\n\n  handleChange = (e) => {\n    this.setState({\n      keyword: e.target.value,\n    });\n  }\n\n  handleCreate = (data) => {\n    const { information } = this.state;\n    this.setState({\n      information: information.concat({id: this.id++, ...data})\n    })\n  }\n\n  handleRemove = (id) => {\n    const { information } = this.state;\n    this.setState({\n      information: information.filter(info => info.id !== id)\n    })\n  }\n\n  handleUpdate = (id, data) => {\n    const { information } = this.state;\n    this.setState({\n      information: information.map(\n        info => id === info.id\n        ? { ...info, ...data }\n        : info\n      )\n    })\n  }\n\n  render() {\n    const { information, keyword } = this.state;\n    return (\n      <div>\n        <PhoneForm \n          onCreate={this.handleCreate} />\n        <p>\n          <input\n            placeholder=\"searching..\"\n            onChange={this.handleChange}\n            value={keyword}\n          />\n        </p>\n        <hr />\n        <PhoneInfoList \n          data={information} \n          onRemove={this.handleRemove}\n          onUpdate={this.handleUpdate}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}